brotli_libs = brotlicommon brotlienc brotlidec

./: lib{$brotli_libs}

lib{brotlicommon}: include/h{** -encode -decode} common/{h c}{**}
lib{brotlienc}:    include/h{encode} enc/{h c}{**} lib{brotlicommon}
lib{brotlidec}:    include/h{decode} dec/{h c}{**} lib{brotlicommon}

# Note that we are not distributing common/dictionary.bin* because its only
# purpose, according to common/dictionary.h, is the sharing of the dictionary
# data between multiple languages (e.g., the C and Java implementations).
#
# common/dictionary.bin is the static dictionary defined in the RFC and
# common/dictionary.bin.br is the compressed version of that file.
#
# By default the dictionary data is inline in common/dictionary.c but if
# BROTLI_EXTERNAL_DICTIONARY_DATA is defined that data is omitted and the user
# can set the dictionary data using BrotliSetDictionaryData(const uint8_t*) in
# common/dictionary.h.

linux   = ($c.target.class  == 'linux')
freebsd = ($c.target.system == 'freebsd')
macos   = ($c.target.class  == 'macos')
windows = ($c.target.class  == 'windows')
bsd     = ($c.target.class  == 'bsd')

# Build options.
#
c.poptions =+ "-I$src_base/include"

# These OS_* macros are (currently) only used by common/platform.h to decide
# which byte order header to include. (There are no Windows or OpenBSD/NetBSD
# macros.)
#
if $linux
  c.poptions += -DOS_LINUX
elif $freebsd
  c.poptions += -DOS_FREEBSD
elif $macos
  c.poptions += -DOS_MACOSX
elif $windows
{
  # These macros are used (only) for the usual dllexport/dllimport logic on
  # Windows (see include/brotli/port.h). Note that the upstream cmake build
  # defines them on all operating systems for some reason (but the autotools
  # build does not).
  #
  objs{*}:        c.poptions += -DBROTLI_SHARED_COMPILATION
  common/objs{*}: c.poptions += -DBROTLICOMMON_SHARED_COMPILATION
  enc/objs{*}:    c.poptions += -DBROTLIENC_SHARED_COMPILATION
  dec/objs{*}:    c.poptions += -DBROTLIDEC_SHARED_COMPILATION
}

# libm is required on some platforms for the C99 log2() function. The
# BROTLI_HAVE_LOG2 macro is defined to 1 if log2() is available and 0
# otherwise.
#
# If BROTLI_HAVE_LOG2 is undefined, enc/fast_log.h (the only place it's
# currently referenced) defines it to 1 unless we're on MSVC <= 12 or Android
# API levels < 18, in which case it defines it to 0.
#
# The configure build does not define this macro but the cmake one does. It
# looks like the only reason they do this instead of letting enc/fast_log.h
# take care of it is because cmake does not have built-in support to decide
# whether or not libm needs to be linked.
#
# Therefore because we deal with libm statically we do not define
# BROTLI_HAVE_LOG2 in order to prevent the log2() detection in enc/fast_log.h
# from being disabled.
#
if ($linux || $bsd)
  lib{$brotli_libs}: c.libs += -lm

# Export options.
#
# Note: let's not duplicate -I in enc/dec since common is our interface
#       dependency.
#
lib{brotlicommon}: c.export.poptions = "-I$src_base/include"
libs{brotlicommon}: c.export.poptions += -DBROTLI_SHARED_COMPILATION
lib{brotlienc}: c.export.libs = lib{brotlicommon}
lib{brotlidec}: c.export.libs = lib{brotlicommon}

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{$brotli_libs}: bin.lib.version = "-$version.project_id"
else
  lib{$brotli_libs}: bin.lib.version = "-$version.major.$version.minor"

# Install only public headers into the brotli/ subdirectory of, say,
# /usr/include/.
#
h{*}: install = false
include/brotli/h{*}: install = include/brotli/
